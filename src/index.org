#+TITLE: Webhooks
#+AUTHOR: VLEAD
#+DATE: [2016-02-17 Wed]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ./org-templates/level-0.org
#+options: ^:nil


* Introduction
  [[https://developer.github.com/webhooks/][Webhooks]] is a feature on github that can be configured for any repository
  that allows posting on an event to a registered service.  

  This project is about the service that receives the post data triggered by an
  event on a repository on github.

  The service, upon the post, clones the repository, builds the repository and
  pushes the documentation generated from the build for hosting server. 
  
* Requirements
  1. The service parses the data posted by github.
  2. The service clones the repository on which a push event
     occurred.
  3. The service builds documentation and moves the built documentation to a
     hosting server.

* Design
  =webhooks= service is registered with github repositories where it is intended to
  act on a push event on those repositories.  GitHub ensures that whenever
  there is a push to a repository for which a webhook service is registered, it
  posts the relevant data to the registered service. 

** Technologies
*** Python
*** Flask
    [[http://flask.pocoo.org/docs/0.10/][Flask]] is a micro framework that essentially does routing and processing
    requests.  Flask is not burdened with other features that might be
    necessary as the application becomes more complex.  But in such a scenario,
    the rationale is to compose the application with tools that do specific job
    rather than start with a behemoth and worry about missing functionality. 
    
    A [[https://www.quora.com/Why-is-Flask-considered-a-microframework-when-it-can-be-used-to-create-large-web-applications?share%3D1][read]] on =flask= about it's single pointed features.

* Implementation
  =webhooks= is implemented as a service, using the =[[http://flask.pocoo.org/docs/0.10/][flask]]= micro framework. 
  The webhooks service is able to route and process the requests.   

** End Point for =Push Events=
   An end point is defined where the posts from GitHub end up whenever there is
   a push on the repository.  After the post request is received, the clone url
   is parsed out, the repo is cloned and built. After building, the docs
   generated are pushed to a documents hosting server. 

#+NAME: push-event
#+BEGIN_SRC python
@api.route("/push-event", methods=['POST'])
def push():
    logger.debug("in push post api")
    if request.json:
        data = request.get_json()

    logger.debug("data = %s" % str(data))
    logger.debug("clone_url = %s" % str(data['repository']['clone_url']))
#+END_SRC

** Configure logging
   A logger is instantiated which can be used across the application for
   logging.  The log file, log level are configuration parameters. 

#+NAME: logger
#+BEGIN_SRC python

# -*- coding: utf-8 -*-

import os
import logging
import logging.handlers
from config import LOG_FILE_DIRECTORY
from config import LOG_LEVEL


def create_logger(name):

    logger = logging.getLogger(name)
    logger.level = LOG_LEVEL
    log_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)),
                           '..',
                           LOG_FILE_DIRECTORY)
    log_file = "%s/%s.log" % (log_dir, name)
    os.system("sudo touch %s" % log_file)
    os.system("sudo chmod 777 %s" % log_file)
    timed_handler = logging.handlers.TimedRotatingFileHandler(log_file,
                                                              when='midnight',
                                                              backupCount=5)
    formatter = logging.Formatter('%(asctime)s: %(message)s',
                                  datefmt='%m/%d/%Y %I:%M:%S %p')
    timed_handler.setFormatter(formatter)
    logger.addHandler(timed_handler)
    logger.propagate = False
    logger.has_handlers = True

    return logger
#+END_SRC

** Server
   This is the boiler plate code that creates the server. 

#+NAME: server
#+BEGIN_SRC python

# -*- coding: utf-8 -*-

import os

from flask import Flask, jsonify, make_response
from flask.ext.cors import CORS

from api import api
# import config file
import config
from app_logger import create_logger

def create_app(config):
    # init our app
    app = Flask(__name__)
    logger = create_logger("app")

    # load config values from the config file
    app.config.from_object(config)

    # register blueprints
    app.register_blueprint(api)
    configure_errorhandlers(app, logger)
    configure_cors(app)

    # all set; return app object
    return app


# configure cross origin resource sharing
def configure_cors(app):
    # CORS(app)
    CORS(app, origins=config.ALLOWED_ORIGINS,
         methods=['GET', 'OPTIONS', 'PUT', 'POST'],
         allow_headers='Content-Type')


# custom error handlers to return JSON errors with appropiate status codes

def configure_errorhandlers(app, logger):

    @app.errorhandler(500)
    def server_error(err):
        logger.error("error code = %s" % "500")
        resp = None
        try:
            logger.error("error desc = %s" % err.description)
            resp = make_response(jsonify(error=err.description), 500)
        except Exception:
            try:
                logger.error("error mesg = %s" % err.message)
                resp = make_response(jsonify(error=err.message), 500)
            except Exception:
                resp = make_response(jsonify(error=str(err)), 500)
                logger.error("error = %s" % str(err))
        return resp

    @app.errorhandler(405)
    def method_not_allowed(err):
        logger.error("error code = %s" % "405")
        resp = None
        try:
            logger.error("error desc = %s" % err.description)
            resp = make_response(jsonify(error=err.description), 405)
        except Exception:
            try:
                logger.error("error mesg = %s" % err.message)
                resp = make_response(jsonify(error=err.message), 405)
            except Exception:
                resp = make_response(jsonify(error=str(err)), 405)
                logger.error("error = %s" % str(err))
        return resp

    @app.errorhandler(404)
    def not_found(err):
        logger.error("error code = %s" % "404")
        resp = None
        try:
            logger.error("error desc = %s" % err.description)
            resp = make_response(jsonify(error=err.description), 404)
        except Exception:
            try:
                logger.error("error mesg = %s" % err.message)
                resp = make_response(jsonify(error=err.message), 404)
            except Exception:
                resp = make_response(jsonify(error=str(err)), 404)
                logger.error("error = %s" % str(err))
        return resp

    @app.errorhandler(400)
    def bad_request(err):
        logger.error("error code = %s" % "400")
        resp = None
        try:
            logger.error("error desc = %s" % err.description)
            resp = make_response(jsonify(error=err.description), 400)
        except Exception:
            try:
                logger.error("error mesg = %s" % err.message)
                resp = make_response(jsonify(error=err.message), 400)
            except Exception:
                resp = make_response(jsonify(error=str(err)), 400)
                logger.error("error = %s" % str(err))
        return resp


if __name__ == "__main__":
    app = create_app(config)
    app.run(debug=True, host='0.0.0.0')

#+END_SRC

** Configuration
   All constants that define the configuration of this application are defined
   here.

#+NAME: config
#+BEGIN_SRC python
LOG_FILE_DIRECTORY = 'logs'
LOG_FILE = 'webhooks.log'
# Logging Levels
DEBUG = 10
INFO = 20
WARNING = 30
ERROR = 40

# Log level for the application
LOG_LEVEL = DEBUG

ALLOWED_ORIGINS = "['*']"

#+END_SRC

** Python initialization
#+NAME: init
#+BEGIN_SRC python
print "src package"
#+END_SRC

* Provisioning
** Install python dependencies
   All the python dependencies are installed using a script.

#+NAME: python-dependencies
#+BEGIN_SRC sh

#!/bin/bash

# Install pre-requsite dependencies: python-dev, mysqld-dev, setuptools,
# apache, mod_wsgi etc.
echo "Installing pre-requisite dependencies.."
apt-get -y update
apt-get install -y python-dev python-setuptools apache2 libapache2-mod-wsgi
if [[ $? -ne 0 ]]; then
  echo "FATAL: Installing pre-requisite dependencies failed!"
  exit 1;
fi

echo "Enabling the mod WSGI on apache"
a2enmod wsgi
if [[ $? -ne 0 ]]; then
  echo "FATAL: Unable to enable mod wsgi!"
  exit 1;
fi

# Installing python dependencies
echo "Installing dependencies.."
pip install flask flask-cors flask-testing requests
if [[ $? -ne 0 ]]; then
  echo "FATAL: Installation failed!"
  exit 1;
fi

exit 0

#+END_SRC

#+NAME: setup
#+BEGIN_SRC python
from setuptools import setup

requires = [
    'flask',
    'flask-cors',
    'flask-testing',
    'requests'
]

setup(
    name='webhooks',
    version='0.1',
    install_requires=requires
)

#+END_SRC

** Configure the apache webserver
   Most of the features available in apache are not in flask.  It is a best
   practice to run the flask application to run within apache.  Apache provides
   a mechanism to register another web application as a virtual host.

#+NAME: virtual-host
#+BEGIN_SRC sh
#!/bin/bash
# Configure the application in the deployment environment
# 1. Update the apache config to server via WSGI


if [[ `id -u` -ne 0 ]]; then
  echo "You have to execute this script as super user!"
  exit 1;
fi


update_apache_config() {
  PROC_NAME="webhooks"
  WSGI_SCRIPT="/var/www/webhooks.wsgi"
  APACHE_VHOST_FILE="/etc/apache2/sites-available/default"

  sed -i "/<\/VirtualHost>/i \
    WSGIScriptAlias / $WSGI_SCRIPT
  " $APACHE_VHOST_FILE
}

update_apache_config
if [[ $? -ne 0 ]]; then
  echo "FATAL: Failed to update apache config"
  exit 1;
fi

service apache2 restart

exit 0;

#+END_SRC

** Convert Flask as a WSGI applicaiton
#+NAME: wsgi
#+BEGIN_SRC python

import sys, os

BASE_DIR = os.path.join(os.path.dirname(__file__))

sys.path.insert(0, BASE_DIR)

from src.app import create_app
from src import config

application = create_app(config)

#+END_SRC

* Tangling
** File Structure
These are all the files that are make up this application. 

-- configure.sh
-- setup.py
-- setup.sh
-- webhooks.wsgi
-- src
   -- app.py
   -- api.py
   -- app_logger.py
   -- config.py
   -- __init__.py

** configure.sh
#+BEGIN_SRC sh :tangle configure.sh :eval no :noweb yes  
<<virtual-host>>
#+END_SRC

** setup.py
#+BEGIN_SRC python :tangle setup.py :eval no :noweb yes  
<<setup>>
#+END_SRC

** setup.sh
#+BEGIN_SRC sh :tangle setup.sh :eval no :noweb yes  
<<python-dependencies>>
#+END_SRC


** webhooks.wsgi
#+BEGIN_SRC python :tangle webhooks.wsgi :eval no :noweb yes  
<<wsgi>>
#+END_SRC
** src/app.py
#+BEGIN_SRC python :tangle src/app.py :eval no :noweb yes  
<<server>>
#+END_SRC
** src/api.py
#+BEGIN_SRC python :tangle src/api.py :eval no :noweb yes  
# -*- coding: utf-8 -*-
import os
import csv
import requests
from datetime import datetime
import inspect
from flask import session, render_template, Blueprint, request, jsonify, abort,\
    current_app, redirect, url_for
from config import *
from flask import current_app

from flask import Flask, redirect, url_for
from werkzeug import secure_filename

from app_logger import create_logger

api = Blueprint('APIs', __name__)

logger = create_logger("api")

@api.route("/")
def index():
    logger.debug("helloooooo")
    return render_template("index.html")

<<push-event>>

#+END_SRC

** src/app_logger.py
#+BEGIN_SRC python :tangle src/app_logger.py :eval no :noweb yes  
<<logger>>
#+END_SRC

** src/config.py
#+BEGIN_SRC python :tangle src/config.py :eval no :noweb yes  
<<config>>
#+END_SRC

** src/__init__.py
#+BEGIN_SRC python :tangle src/__init__.py :eval no :noweb yes  
<<init>>
#+END_SRC

* Test Cases

* Releases
